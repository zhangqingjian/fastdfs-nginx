
gdb调试lua


GitHub地址：
wget https://codeload.github.com/zhangqingjian/fastdfs-nginx/zip/master


1、GraphicsMagick 用 RUN yum install -y GraphicsMagick GraphicsMagick-devel 安装
2、参考 https://github.com/juneryo/fastdfs-nginx
3、GraphicsMagick 涉及到的命令地址 http://www.graphicsmagick.org/GraphicsMagick.html#details-auto-orient
a、命令
 gm convert -size 800x600 input.jpg \
              -resize 800x600 -background black \
              -compose Copy -gravity center \
              -extent 800x600 \
              -quality 92 output.jpg
4、安装docker 环境
5、配置docker 加速
a、daocloud  curl -sSL https://get.daocloud.io/daomonit/install.sh | sh -s 36533445641aee6f15e882b57a3b05de32573980
b、阿里云镜像
vim  /etc/systemd/system/multi-user.target.wants/docker.service
找到 ExecStart= 这一行，在这行最后添加加速器地址 --registry-mirror=<加速器地址> ，如：ExecStart=/usr/bin/dockerd --registry-mirror=https://4w6ckiga.mirror.aliyuncs.com

 
安装后需要注意的：
1、nginx.conf里配置的lua脚本会被 /usr/local/my文件夹给替换掉，导致找不到fastdfs.lua和 openresty.lua两个文件，需要手动copy过来，所以只有在测试的时候需要覆盖/usr/local/myshare/
2、/data/fdfs/data/为最终所有fastDfs物理文件存放目录，这个需要通过挂载盘，最终挂载到物理存储设备上
3、启动docker的时候需要 指定tracker_server对应的实际IP地址，否则，绑定127.0.0.1会出错
4、docker启动后需要查看netstat -tpnl 看是否开启了23000、22122、24001、24002这几个端口，如果哪个没有启动进入docker容器查看日志 cd var/log/fdfs/ 
   
5、需要配置定时器 ，这个目前有待商榷
 凌晨2点执行，查找目录下面7天内没有被访问的文件并删除，释放空间
0 2 * * * find /data/images -atime -7 | xargs rm -rf
6、需要修改 /usr/local/myshare/fastdfs-nginx/lua/fastdfs.lua文件中的 fdfs:set_tracker("10.7.23.63", 22122) 修改fastdfs-tracker的服务器IP ,因为vagrant是需要设定一个指定的内网IP的
7、如果需要测试lua脚本输出错误，需要修改nginx.conf文件中的error_log  /var/log/nginx/error.log  debug;

8、Lua在线调试地址 https://www.lua.org/cgi-bin/demo


6、修改nginx.conf 增加user nginx，同时需要在dockerfile的脚本中增加 
RUN useradd -r nginx -s /bin/bash 以保证 nginx可以调用配置中对应的fastdfs.lua脚本

否则会报
failed to load external Lua file "xxxx.lua": cannot open xxxx.lua: Permission denied


7、报Lua中的require的错误原因为 nginx.conf中没有配置自己写的lua文件库，解决方案:
lua_package_path "/usr/local/myshare/lua/?.lua;;";
8、 该警告暂时没有解决：detected a LuaJIT version which is not OpenResty's; many optimizations will be disabled and performance will be compromised (see https://github.com/openresty/luajit2 for OpenResty's LuaJIT or, even better, consider using the OpenResty releases from https://openresty.org/en/download.html

9、通过dockerfile构建 fastdfs-nginx镜像 
docker build -t fastdfs-nginx ./

10、可以通过vi /etc/nginx/nginx.conf查看nginx配置相关信息
11、可以通过 cat /var/log/nginx/error.log查看nginx输出的文件信息
12、查看容器日志 docker logs -f --tail=100 fastdfs-nginx
13、查看 storage.log   cat /var/log/fdfs/storaged.log
14、查看 tracker.log   cat /var/log/fdfs/trackerd.log
15、重新启动nginx    /usr/sbin/nginx -s reload
16、docker exec -it fastdfs-nginx /bin/bash
17、最终fastdfs上传的文件会在 data/sync文件夹中生成一个叫 binlog.000 的文件，里面记录了所有已上传的文件列表
18、加载C写的limage.so的坑
   a、错误为nginx执行lua代码调用limage.so，第一次可以调用limage.so中的image_size函数，第二次就会出现attempt to call global 'image_size' (a nil value)
   b、解决方案：
      要将fastdfs.lua中的  local lim= require "limage"  local width,height= image_size(path) 这段代码中的 require "limage"放到nginx.conf中去
      正确的写法
        init_by_lua 'require "limage"';

	## server port for fastdfs
    
       server {
       
	 listen       24002;
         ......
        
#在fastdfs.lua中才不会出现attempt to call global 'image_size' (a nil value)的错误，否则是执行代码第一次能执行，但是，第二次就调用不了了
ln -s /usr/local/src/lua-5.3.1/src/lua /usr/bin/lua

ln -s /usr/local/src/lua-5.3.1/src/clua /usr/bin/clua

cp /usr/local/myshare/fastdfs-nginx/install/fastdfs/limage-master/bin/clib/limage.so   /usr/local/lib/lua/5.1/


查看nginx因为缺少lua库而启动出错
ldd $(whereis /usr/sbin/nginx)

/usr/local/lib/lua/5.1/

  docker run -itd \
  --name fastdfs-nginx \
  --network=host \
  --restart=always \
  -e TRACKER_SERVER=10.7.23.63:22122 \
  -v /etc/localtime:/etc/localtime:ro \
  -v /var/log/fdfs/:/data/fdfs/logs/ \
  -v /usr/local/my/:/usr/local/myshare/ \
  -v /usr/local/my/data/:/data/fdfs/data/ \
  -v /var/log/nginx/:/var/log/nginx/ \
  fastdfs-nginx \
  sh -c "/usr/bin/fdfs_trackerd /etc/fdfs/tracker.conf restart && /usr/bin/fdfs_storaged /etc/fdfs/storage.conf restart && /usr/sbin/nginx -g 'daemon off;'"


图片编辑器：
1、比如：如果想按照以高为准,宽度自适应，则只传h_*就可以了
http://10.7.23.7:24002/group1/M00/00/00/CgcXP13mWo6EZD3SAAAAABfcgtA036.jpg?x-oss-process=resize,m_fill,h_300
2、比如：如果想按照以宽为准，高度自适应，则只传w_*就可以了
http://10.7.23.7:24002/group1/M00/00/00/CgcXP13mWo6EZD3SAAAAABfcgtA036.jpg?x-oss-process=resize,m_fill,w_300

关于ip有几点注意的地方
因为fastdfs最终是通过tracker_server向外提供图片服务的，所以tracker_server的ip地址必须要对外能访问的
1、vagrant的vagrantfile配置为config.vm.network "public_network",ip:"10.7.23.63"
2、docker 构建实例的时候TRACKER_SERVER=10.7.23.63:22122 要指定Ip

调试Lua
为了能时刻调试fastdfs.lua(用于nginx调用实现图片裁剪，生成缩略图的)
所以用vagrant的时候需要注意以下几点
1、vagrant的vagrantfile 需要做路径映射 config.vm.synced_folder "D:/development/virtualbox+vagrant/linux-share/fastdfs-nginx-master", "/usr/local/my"
2、docker实例构建的时候需要用-v /usr/local/my/:/usr/local/myshare/ \
3、在nginx.conf中是引用了lua位置的，
...
lua_package_path "/usr/local/myshare/fastdfs-nginx/lua
....
4、这样每次需要调试lua，则可以透过vagrant 到docker，再到nginx对应的fastdfs.lua文件进行编辑，只要修改后重启nginx即可

 
