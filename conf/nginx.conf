
 user  root;
worker_processes  1;

error_log  /var/log/nginx/error.log  debug;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include            /etc/nginx/mime.types;
    default_type       application/octet-stream;
	#开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络
    sendfile           off;
    keepalive_timeout  60;

    upstream redisbackend {
        server 127.0.0.1:6379;
        keepalive 1024;
    }
     lua_package_path "/usr/local/myshare/fastdfs-nginx/lua/?.lua;;";
	 lua_package_cpath "/usr/local/myshare/fastdfs-nginx/so/?.so;;";  #

    server {
        listen       24001;
        # server_name  localhost;
        charset utf-8;

        location / {
            root   /usr/share/nginx/html;
			index  index.html index.htm;
        }

        ## match url like: http://ip:port/group1/M00/00/00/xxx?tk=xxx&&typ=xxx
        location ~ /group[0-9]+/M00/ {
            eval $answer {
                set $redis_key $arg_tk;
                redis_pass     redisbackend;
            }
            if ($answer = "") {
                # echo "{ code: 404 }";
                return 404;
            }
            if ($answer != "") {
                ## typ is file suffix
                proxy_pass http://127.0.0.1:24002$uri.$arg_typ;
            }
        }
    }
	#该处是nginx的lua加载C写的limage.so的坑，目前只要将调用的limage.so的引入放在该处，
	#在fastdfs.lua中才不会出现attempt to call global 'image_size' (a nil value)的错误，否则是执行代码第一次能执行，但是，第二次就调用不了了
	init_by_lua 'require "limage"';
	## server port for fastdfs
    server {
        listen       24002;
        # server_name  localhost;

        gzip  on;
        gzip_min_length 1k;
        gzip_buffers 4 16k;
        gzip_comp_level 2;
        gzip_types text/plain application/x-javascript text/css application/xml text/javascript image/jpeg image/gif image/png image/bmp;
        gzip_vary off;
        gzip_disable "MSIE [1-6]\.";

        location ~ /group[0-9]+/M00/ {
            #root /data/fdfs/data;
			alias /data/fdfs/data/;
			set $image_root "/data/fdfs/data";
                if ($uri ~ "/([a-zA-Z0-9]+)/([a-zA-Z0-9]+)/([a-zA-Z0-9]+)/([a-zA-Z0-9]+)/(.*)") {
                  set $image_dir "$image_root/$3/$4/";
                  set $image_name "$5";
                  set $file "$image_dir$image_name";
                }
		
		#是否需要走lua进行图片裁剪，默认不需要
			    set $can_lua '0';
				#如果文件不存在并且带缩略图的样式，则说明需要通过lua下载图片并且进行图片处理得到新图
				if (!-f $file) {
                     set $can_lua '1';
				}
				#request_uri=http://10.7.23.7:24002/group1/M00/00/00/CgcXPlwPF4CED5i_AAAAAACbVVc218.jpg?x-oss-process=image/resize,m_fill,w_70,h_70
				#if ( $request_uri ~ "/(.*)\?(.*)" )
				#{
					#set $can_lua '1';
				#}
				#参数: $is_args
				#解释: 表示请求中的URL是否带参数,如果带参数,$is_args值为"?"。如果不带参数,则是空字符串
				#如果带参数则表示需要走lua获取具体的缩略图
               if ($is_args)
				{
					set $can_lua '1';
				}
				if ($can_lua = 1)
				{
				  # 关闭lua代码缓存，方便调试lua脚本
				  # 关闭lua代码缓存，方便调试lua脚本,lua_code_cache设置为off时。init_by_lua的结果会被释放,所以要设置成on
                   lua_code_cache on;
                  content_by_lua_file "/usr/local/myshare/fastdfs-nginx/lua/fastdfs.lua";
				}
            ngx_fastdfs_module;
        }
    }
}
